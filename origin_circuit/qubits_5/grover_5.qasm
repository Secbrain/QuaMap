OPENQASM 2.0;
include "qelib1.inc";
qreg q[4];
qreg flag[1];
creg meas[5];
creg reg_measure[5];
h q[0];
h q[1];
h q[2];
u3(pi/2,pi/16,-pi) q[3];
x flag[0];
cx q[3],flag[0];
u1(-pi/16) flag[0];
cx q[3],flag[0];
cx q[3],q[2];
u1(-pi/16) q[2];
u1(pi/16) flag[0];
cx q[2],flag[0];
u1(pi/16) flag[0];
cx q[2],flag[0];
cx q[3],q[2];
u1(pi/16) q[2];
u1(-pi/16) flag[0];
cx q[2],flag[0];
u1(-pi/16) flag[0];
cx q[2],flag[0];
cx q[2],q[1];
u1(-pi/16) q[1];
u1(pi/16) flag[0];
cx q[1],flag[0];
u1(pi/16) flag[0];
cx q[1],flag[0];
cx q[3],q[1];
u1(pi/16) q[1];
u1(-pi/16) flag[0];
cx q[1],flag[0];
u1(-pi/16) flag[0];
cx q[1],flag[0];
cx q[2],q[1];
u1(-pi/16) q[1];
u1(pi/16) flag[0];
cx q[1],flag[0];
u1(pi/16) flag[0];
cx q[1],flag[0];
cx q[3],q[1];
u1(pi/16) q[1];
u1(-pi/16) flag[0];
cx q[1],flag[0];
u1(-pi/16) flag[0];
cx q[1],flag[0];
cx q[1],q[0];
u1(-pi/16) q[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
cx q[3],q[0];
u1(pi/16) q[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
cx q[2],q[0];
u1(-pi/16) q[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
cx q[3],q[0];
u1(pi/16) q[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
cx q[1],q[0];
u1(-pi/16) q[0];
u3(pi/2,pi/8,0) q[1];
u1(pi/16) flag[0];
cx q[0],flag[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
cx q[3],q[0];
u1(pi/16) q[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
cx q[2],q[0];
u1(-pi/16) q[0];
u3(pi/2,pi/8,0) q[2];
u1(pi/16) flag[0];
cx q[0],flag[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
cx q[3],q[0];
u1(pi/16) q[0];
u3(pi/2,pi/8,0) q[3];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u3(pi/2,pi/8,0) q[0];
cx q[0],q[1];
u1(-pi/8) q[1];
cx q[0],q[1];
cx q[1],q[2];
u1(-pi/8) q[2];
cx q[0],q[2];
u1(pi/8) q[2];
cx q[1],q[2];
u1(-pi/8) q[2];
cx q[0],q[2];
cx q[2],q[3];
u1(-pi/8) q[3];
cx q[1],q[3];
u1(pi/8) q[3];
cx q[2],q[3];
u1(-pi/8) q[3];
cx q[0],q[3];
u1(pi/8) q[3];
cx q[2],q[3];
u1(-pi/8) q[3];
cx q[1],q[3];
u3(pi/2,-pi,-pi) q[1];
u1(pi/8) q[3];
cx q[2],q[3];
u3(pi/2,-pi,-pi) q[2];
u1(-pi/8) q[3];
cx q[0],q[3];
u3(pi/2,-pi,-pi) q[0];
u3(pi/2,-15*pi/16,-pi) q[3];
u1(pi/16) flag[0];
cx q[3],flag[0];
u1(-pi/16) flag[0];
cx q[3],flag[0];
cx q[3],q[2];
u1(-pi/16) q[2];
u1(pi/16) flag[0];
cx q[2],flag[0];
u1(pi/16) flag[0];
cx q[2],flag[0];
cx q[3],q[2];
u1(pi/16) q[2];
u1(-pi/16) flag[0];
cx q[2],flag[0];
u1(-pi/16) flag[0];
cx q[2],flag[0];
cx q[2],q[1];
u1(-pi/16) q[1];
u1(pi/16) flag[0];
cx q[1],flag[0];
u1(pi/16) flag[0];
cx q[1],flag[0];
cx q[3],q[1];
u1(pi/16) q[1];
u1(-pi/16) flag[0];
cx q[1],flag[0];
u1(-pi/16) flag[0];
cx q[1],flag[0];
cx q[2],q[1];
u1(-pi/16) q[1];
u1(pi/16) flag[0];
cx q[1],flag[0];
u1(pi/16) flag[0];
cx q[1],flag[0];
cx q[3],q[1];
u1(pi/16) q[1];
u1(-pi/16) flag[0];
cx q[1],flag[0];
u1(-pi/16) flag[0];
cx q[1],flag[0];
cx q[1],q[0];
u1(-pi/16) q[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
cx q[3],q[0];
u1(pi/16) q[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
cx q[2],q[0];
u1(-pi/16) q[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
cx q[3],q[0];
u1(pi/16) q[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
cx q[1],q[0];
u1(-pi/16) q[0];
u3(pi/2,pi/8,0) q[1];
u1(pi/16) flag[0];
cx q[0],flag[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
cx q[3],q[0];
u1(pi/16) q[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
cx q[2],q[0];
u1(-pi/16) q[0];
u3(pi/2,pi/8,0) q[2];
u1(pi/16) flag[0];
cx q[0],flag[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
cx q[3],q[0];
u1(pi/16) q[0];
u3(pi/2,pi/8,0) q[3];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u3(pi/2,pi/8,0) q[0];
cx q[0],q[1];
u1(-pi/8) q[1];
cx q[0],q[1];
cx q[1],q[2];
u1(-pi/8) q[2];
cx q[0],q[2];
u1(pi/8) q[2];
cx q[1],q[2];
u1(-pi/8) q[2];
cx q[0],q[2];
cx q[2],q[3];
u1(-pi/8) q[3];
cx q[1],q[3];
u1(pi/8) q[3];
cx q[2],q[3];
u1(-pi/8) q[3];
cx q[0],q[3];
u1(pi/8) q[3];
cx q[2],q[3];
u1(-pi/8) q[3];
cx q[1],q[3];
u3(pi/2,-pi,-pi) q[1];
u1(pi/8) q[3];
cx q[2],q[3];
u3(pi/2,-pi,-pi) q[2];
u1(-pi/8) q[3];
cx q[0],q[3];
u3(pi/2,-pi,-pi) q[0];
u3(pi/2,-15*pi/16,-pi) q[3];
u1(pi/16) flag[0];
cx q[3],flag[0];
u1(-pi/16) flag[0];
cx q[3],flag[0];
cx q[3],q[2];
u1(-pi/16) q[2];
u1(pi/16) flag[0];
cx q[2],flag[0];
u1(pi/16) flag[0];
cx q[2],flag[0];
cx q[3],q[2];
u1(pi/16) q[2];
u1(-pi/16) flag[0];
cx q[2],flag[0];
u1(-pi/16) flag[0];
cx q[2],flag[0];
cx q[2],q[1];
u1(-pi/16) q[1];
u1(pi/16) flag[0];
cx q[1],flag[0];
u1(pi/16) flag[0];
cx q[1],flag[0];
cx q[3],q[1];
u1(pi/16) q[1];
u1(-pi/16) flag[0];
cx q[1],flag[0];
u1(-pi/16) flag[0];
cx q[1],flag[0];
cx q[2],q[1];
u1(-pi/16) q[1];
u1(pi/16) flag[0];
cx q[1],flag[0];
u1(pi/16) flag[0];
cx q[1],flag[0];
cx q[3],q[1];
u1(pi/16) q[1];
u1(-pi/16) flag[0];
cx q[1],flag[0];
u1(-pi/16) flag[0];
cx q[1],flag[0];
cx q[1],q[0];
u1(-pi/16) q[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
cx q[3],q[0];
u1(pi/16) q[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
cx q[2],q[0];
u1(-pi/16) q[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
cx q[3],q[0];
u1(pi/16) q[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
cx q[1],q[0];
u1(-pi/16) q[0];
u3(pi/2,pi/8,0) q[1];
u1(pi/16) flag[0];
cx q[0],flag[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
cx q[3],q[0];
u1(pi/16) q[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
cx q[2],q[0];
u1(-pi/16) q[0];
u3(pi/2,pi/8,0) q[2];
u1(pi/16) flag[0];
cx q[0],flag[0];
u1(pi/16) flag[0];
cx q[0],flag[0];
cx q[3],q[0];
u1(pi/16) q[0];
u3(pi/2,pi/8,0) q[3];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u1(-pi/16) flag[0];
cx q[0],flag[0];
u3(pi/2,pi/8,0) q[0];
cx q[0],q[1];
u1(-pi/8) q[1];
cx q[0],q[1];
cx q[1],q[2];
u1(-pi/8) q[2];
cx q[0],q[2];
u1(pi/8) q[2];
cx q[1],q[2];
u1(-pi/8) q[2];
cx q[0],q[2];
cx q[2],q[3];
u1(-pi/8) q[3];
cx q[1],q[3];
u1(pi/8) q[3];
cx q[2],q[3];
u1(-pi/8) q[3];
cx q[0],q[3];
u1(pi/8) q[3];
cx q[2],q[3];
u1(-pi/8) q[3];
cx q[1],q[3];
u3(pi/2,-pi,-pi) q[1];
u1(pi/8) q[3];
cx q[2],q[3];
u3(pi/2,-pi,-pi) q[2];
u1(-pi/8) q[3];
cx q[0],q[3];
u3(pi/2,-pi,-pi) q[0];
u3(pi/2,-pi,-pi) q[3];
u1(pi/16) flag[0];
barrier q[0],q[1],q[2],q[3],flag[0];
measure q[0] -> meas[0];
measure q[1] -> meas[1];
measure q[2] -> meas[2];
measure q[3] -> meas[3];
measure flag[0] -> meas[4];
barrier q[0],q[1],q[2],q[3],flag[0];
measure q[0] -> reg_measure[0];
measure q[1] -> reg_measure[1];
measure q[2] -> reg_measure[2];
measure q[3] -> reg_measure[3];
measure flag[0] -> reg_measure[4];
